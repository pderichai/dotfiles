# Stop telling me to stop using Bash!
export BASH_SILENCE_DEPRECATION_WARNING=1

# Aliases.
alias ll="ls -lhA"
alias grep="grep --color=auto"
alias e="nvim"
alias godel="ssh-tmux pderichai@godel"
alias godel-local="ssh-tmux pderichai@godel.local"

# ls colors.
export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad

# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=
export HISTTIMEFORMAT="[%F %T] "

# Change the file location because certain bash sessions truncate .bash_history file upon close.
# http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
export HISTFILE=~/.bash_eternal_history

# Allow storing of multi-line shell commands.
shopt -s cmdhist

# Ensure that history is appended to the file.
shopt -s histappend

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
PROMPT_COMMAND="history -a; history -n; $PROMPT_COMMAND"

# Personal bins.
export PATH="$HOME"/bin:"$PATH"

# Function that creates a new tmux session with tmux.
main() { tmux new-session -A -s ${1:-main}; }

# fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export FZF_DEFAULT_OPTS='--reverse'

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/pangd/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/pangd/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/pangd/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/pangd/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

## PROMPT ##
# Return exit code if nonzero.
function nonzero_return() {
	RETVAL=$?
	[ $RETVAL -ne 0 ] && echo "[$RETVAL] "
}

# Get current branch in git repo.
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

# Get current status of git repo.
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

export PS1="\[\e[32m\]\u\[\e[m\]\[\e[90m\]@\[\e[m\]\[\e[92m\]\h\[\e[m\]\[\e[90m\]:\[\e[m\]\[\e[34m\]\w\[\e[m\]\[\e[31m\] \`nonzero_return\`\[\e[m\]\[\e[95m\]\`parse_git_branch\`\[\e[m\] \n\[\e[35m\]>\[\e[m\] "
